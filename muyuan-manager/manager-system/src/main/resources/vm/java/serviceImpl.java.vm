package ${packageName}.${moduleName}.domains.service.impl;

import java.util.List;
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import org.joda.time.DateTime;
#break
#end
#end
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
#if($table.sub)
import java.util.ArrayList;
import com..common.core.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.${moduleName}.domains.model.${subClassName};
#end
import ${packageName}.${moduleName}.infrastructure.persistence.mapper.${ClassName}Mapper;
import ${packageName}.${moduleName}.domains.model.${ClassName};
import ${packageName}.${moduleName}.domains.service.${ClassName}DomainService;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
@AllArgsConstructor
@Slf4j
public class ${ClassName}ServiceImpl implements ${ClassName}Service
{
    private ${ClassName}Repo ${className}Repo;

#if($table.sub)
    private ${SubClassName}Repo ${subClassName}Repo;
#end

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} get(${pkColumn.javaType}DTO ${pkColumn.javaField})
    {
        return ${className}Repo.selectOne(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> list(${ClassName}DTO ${className}DTO)
    {
        return ${className}Repo.select(${className}DTO);
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void add(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'createTime')
        ${className}.setCreateTime(DateTime.now().toDate());
#end
#end
#if($table.sub)
         ${className}Repo.insert(${className});
        ${subClassName}Repo.insert$(${subClassName});
#else
        ${className}Repo.insert(${className});
#end
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void update${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
        ${className}.setUpdateTime(DateTime.now().toDate());
#end
#end
#if($table.sub)
        ${className}Repo.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#end
         ${className}Repo.update${ClassName}(${className});
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int deleteBy${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
#if($table.sub)
        ${className}Repo.delete(${pkColumn.javaField}s);
#end
        return ${className}Repo.delete(${pkColumn.javaField}s);
    }

##    /**
##     * 删除${functionName}信息
##     *
##     * @param ${pkColumn.javaField} ${functionName}主键
##     * @return 结果
##     */
###if($table.sub)
##    @Transactional
###end
##    @Override
##    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
##    {
###if($table.sub)
##        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
###end
##        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
##    }
###if($table.sub)
##
##    /**
##     * 新增${subTable.functionName}信息
##     *
##     * @param ${className} ${functionName}对象
##     */
##    public void insert${subClassName}(${ClassName} ${className})
##    {
##        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
##        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
##        if (StringUtils.isNotNull(${subclassName}List))
##        {
##            List<${subClassName}> list = new ArrayList<${subClassName}>();
##            for (${subClassName} ${subclassName} : ${subclassName}List)
##            {
##                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
##                list.add(${subclassName});
##            }
##            if (list.size() > 0)
##            {
##                ${className}Mapper.batch${subClassName}(list);
##            }
##        }
##    }
###end
}
